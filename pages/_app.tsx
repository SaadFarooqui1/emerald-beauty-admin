// import type { AppProps } from 'next/app';
// import Head from 'next/head';
// import { ReactElement, ReactNode, useEffect } from 'react';
// import { Provider } from 'react-redux';
// import DefaultLayout from '../components/Layouts/DefaultLayout';

// import { appWithI18Next } from 'ni18n';
// import { ni18nConfig } from 'ni18n.config.ts';

// // Perfect Scrollbar
// import 'react-perfect-scrollbar/dist/css/styles.css';

// import PrivateRoute from '@/layouts/protected.layout';
// import { NextPage } from 'next';
// import { QueryClient, QueryClientProvider } from 'react-query';
// import '../styles/tailwind.css';
// import BaseLayout from '@/layouts/base.layout';
// import { store } from '@/redux/store';

// export type NextPageWithLayout<P = {}, IP = P> = NextPage<P, IP> & {
//     getLayout?: (page: ReactElement) => ReactNode;
// };

// type AppPropsWithLayout = AppProps & {
//     Component: NextPageWithLayout;
// };

// const queryClient = new QueryClient({
//     defaultOptions: {
//         // mutations: { onError: (error) => console.log(error) },
//         queries: {
//             refetchOnWindowFocus: false,
//             retry: 0
//             // onError: (error) => console.log(error)
//         }
//     },
// })

// const App = ({ Component, pageProps }: AppPropsWithLayout) => {
//     const getLayout = Component.getLayout ?? ((page) => <DefaultLayout>{page}</DefaultLayout>);

//     const authProps = Component.authenticate ?? false                             

//     const permissions = Component.permissions

//     const roles = Component.roles

//     return (
//         <QueryClientProvider client={queryClient}>
//             <Provider store={store}>
//                 <Head>
//                     <title>Emerald Beauty</title>
//                     <meta charSet="UTF-8" />
//                     <meta httpEquiv="X-UA-Compatible" content="IE=edge" />
//                     <meta name="viewport" content="width=device-width, initial-scale=1.0" />
//                     <meta name="description" content="Generated by create next app" />
//                     <link rel="icon" href="/favicon.ico" />
//                 </Head>
//                 <BaseLayout>
//                     {authProps ? (
//                         <PrivateRoute authenticate={authProps} permissions={permissions} roles={roles} >
//                             {getLayout(<Component {...pageProps} />)}
//                         </PrivateRoute>
//                     ) :
//                         getLayout(<Component {...pageProps} />
//                         )}
//                 </BaseLayout>
//             </Provider>
//         </QueryClientProvider>
//     );
// };
// export default appWithI18Next(App, ni18nConfig);



import type { AppProps } from 'next/app';
import Head from 'next/head';
import { ReactElement, ReactNode } from 'react';
import { Provider } from 'react-redux';
import { PersistGate } from 'redux-persist/integration/react'; // Import PersistGate
import DefaultLayout from '../components/Layouts/DefaultLayout';

import { appWithI18Next } from 'ni18n';
import { ni18nConfig } from 'ni18n.config.ts';

import 'react-perfect-scrollbar/dist/css/styles.css';
import PrivateRoute from '@/layouts/protected.layout';
import { NextPage } from 'next';
import { QueryClient, QueryClientProvider } from 'react-query';
import '../styles/tailwind.css';
import BaseLayout from '@/layouts/base.layout';
import { store, persistor } from '@/redux/store'; // Import persistor

export type NextPageWithLayout<P = {}, IP = P> = NextPage<P, IP> & {
    getLayout?: (page: ReactElement) => ReactNode;
};

type AppPropsWithLayout = AppProps & {
    Component: NextPageWithLayout;
};

const queryClient = new QueryClient({
    defaultOptions: {
        queries: {
            refetchOnWindowFocus: false,
            retry: 0,
        },
    },
});

const App = ({ Component, pageProps }: AppPropsWithLayout) => {
    const getLayout = Component.getLayout ?? ((page) => <DefaultLayout>{page}</DefaultLayout>);
    const authProps = Component.authenticate ?? false;
    const permissions = Component.permissions;
    const roles = Component.roles;

    return (
        <QueryClientProvider client={queryClient}>
            <Provider store={store}>
                <PersistGate loading={<div>Loading...</div>} persistor={persistor}>
                    <Head>
                        <title>Emerald Beauty</title>
                        <meta charSet="UTF-8" />
                        <meta httpEquiv="X-UA-Compatible" content="IE=edge" />
                        <meta name="viewport" content="width=device-width, initial-scale=1.0" />
                        <meta name="description" content="Generated by create next app" />
                        <link rel="icon" href="/favicon.ico" />
                    </Head>
                    <BaseLayout>
                        {authProps ? (
                            <PrivateRoute authenticate={authProps} permissions={permissions} roles={roles}>
                                {getLayout(<Component {...pageProps} />)}
                            </PrivateRoute>
                        ) : (
                            getLayout(<Component {...pageProps} />)
                        )}
                    </BaseLayout>
                </PersistGate>
            </Provider>
        </QueryClientProvider>
    );
};
export default appWithI18Next(App, ni18nConfig);
